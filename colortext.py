from tkinter import *
import random
import operator

colors = ["red", "green", "blue", "cyan", "yellow", "magenta"]
de_col = "black"
string = "MDGPTRGHGLRKKRRSRSQRDRERRSRGGLGAGAAGGGGAGRTRALSLASSSGSDKEDNGKPPSSAPSRPRPPRRKRRESTSAEEDIIDGFAMTSFVTFEALEKDVALKPQERVEKRQTPLTKKKREALTNGLSFHSKKSRLSHPHHYSSDRENDRNLCQHLGKRKKMPKALRQLKPGQNSCRDSDSESASGESKGFHRSSSRERLSDSSAPSSLGTGYFCDSDSDQEEKASDASSEKLFNTVIVNKDPELGVGTLPEHDSQDAGPIVPKISGLERSQEKSQDCCKEPIFEPVVLKDPCPQVAQPIPQPQTEPQLRAPSPDPDLVQRTEAPPQPPPLSTQPPQGPPEAQLQPAPQPQVQRPPRPQSPTQLLHQNLPPVQAHPSAQSLSQPLSAYNSSSLSLNSLSSSRSSTPAKTQPAPPHISHHPSASPFPLSLPNHSPLHSFTPTLQPPAHSHHPNMFAPPTALPPPPPLTSGSLQVAGHPAGSTYSEQDILRQELNTRFLASQSADRGASLGPPPYLRTEFHQHQHQHQHTHQHTHQHTFTPFPHAIPPTAIMPTPAPPMFDKYPTKVDPFYRHSLFHSYPPAVSGIPPMIPPTGPFGSLQGAFQPKTSNPIDVAARPGTVPHTLLQKDPRLTDPFRPMLRKPGKWCAMHVHIAWQIYHHQQKVKKQMQSDPHKLDFGLKPEFLSRPPGPSLFGAIHHPHDLARPSTLFSAAGAAHPTGTPFGPPPHHSNFLNPAAHLEPFNRPSTFTGLAAVGGNAFGGLGNPSVTPNSMFGHKDGPSVQNFSNPHEPWNRLHRTPPSFPTPPPWLKPGELERSASAAAHDRDRDVDKRDSSVSKDDKERESVEKRHSSHPSPAPVLPVNALGHTRSSTEQIRAHLNTEAREKDKPKERERDHSESRKDLAADEHKAKEGHLPEKDGHGHEGRAAGEEAKQLARVPSPYVRTPVVESARPNSTSSREAEPRKGEPAYENPKKSSEVKVKEERKEDHDLPPEAPQTHRASEPPPPNSSSSVHPGPLASMPMTVGVTGIHPMNSISSLDRTRMMTPFMGISPLPGGERFPYPSFHWDPIRDPLRDPYRELDIHRRDPLGRDFLLRNDPLHRLSTPRLYEADRSFRDREPHDYSHHHHHHHHPLSVDPRREHERGGHLDERERLHMLREDYEHTRLHSVHPASLDGHLPHPSLITPGLPSMHYPRISPTAGNQNGLLNKTPPTAALSAPPPLISTLGGRPVSPRRTTPLSAEIRERPPSHTLKDIEAR*"
string2 = "ATGGATGGCCCGACGCGGGGCCATGGACTCCGCAAAAAGCGGCGGTCGCGGTCGCAGCGAGACCGGGAGAGGCGCTCCCGGGGCGGGCTGGGGGCCGGCGCGGCCGGCGGCGGCGGGGCTGGCCGGACCCGGGCGCTCTCACTCGCCTCGTCGTCGGGCTCCGACAAGGAAGACAATGGGAAGCCCCCGTCCTCCGCCCCGTCCCGGCCCAGACCCCCGCGGAGGAAGCGGAGAGAGTCCACCTCGGCAGAAGAGGACATCATTGATGGATTTGCCATGACCAGCTTTGTCACTTTTGAAGCGCTGGAGAAAGATGTAGCACTTAAGCCTCAGGAACGTGTGGAGAAACGCCAGACGCCCCTGACCAAGAAGAAACGAGAAGCACTTACCAATGGCTTGTCCTTTCATTCAAAGAAGAGCAGACTCAGCCACCCACACCACTACAGCTCAGATCGAGAAAATGACCGCAATCTCTGCCAGCACCTTGGGAAGAGAAAGAAAATGCCGAAGGCACTCAGACAGCTCAAGCCAGGACAGAACAGCTGCAGGGACAGTGACAGTGAAAGTGCCAGTGGAGAATCCAAGGGCTTCCACCGGAGCAGCTCTCGGGAAAGGCTCAGTGATAGTTCAGCTCCTTCCAGCTTGGGAACAGGCTACTTCTGTGACAGTGACAGTGACCAGGAAGAGAAGGCATCAGATGCCAGCTCTGAAAAACTCTTCAACACTGTTATTGTAAACAAAGATCCGGAGTTAGGTGTTGGCACGCTACCAGAACATGACAGCCAGGATGCAGGGCCGATTGTCCCCAAGATATCGGGTCTAGAGAGAAGCCAGGAGAAGAGCCAGGACTGTTGCAAAGAGCCAATCTTTGAGCCTGTGGTGCTTAAAGACCCCTGCCCTCAGGTCGCACAGCCAATACCCCAGCCGCAGACGGAGCCCCAACTCCGAGCTCCTTCTCCGGACCCTGACTTGGTGCAGCGCACAGAGGCCCCACCTCAACCCCCACCTCTGAGTACACAGCCACCACAGGGCCCTCCTGAGGCCCAGCTCCAGCCTGCCCCGCAGCCTCAGGTGCAGAGGCCACCCAGGCCACAGTCCCCCACCCAGCTGCTCCATCAGAACCTCCCACCTGTGCAGGCCCACCCCTCTGCTCAGAGCCTCTCCCAGCCATTGTCAGCCTACAACAGCAGTAGCTTAAGCCTCAACAGTTTAAGCAGCAGCAGAAGCAGCACTCCAGCGAAGACTCAGCCCGCCCCACCTCACATCTCCCACCACCCCTCTGCCTCCCCGTTCCCCCTCTCCCTGCCCAACCACAGCCCCCTGCACAGCTTCACACCCACCCTCCAGCCCCCCGCACACTCACATCACCCCAATATGTTTGCCCCTCCCACTGCTCTGCCTCCTCCACCACCACTGACATCAGGAAGTCTGCAGGTGGCCGGACACCCGGCCGGGAGCACTTACTCAGAGCAAGACATCTTGCGACAGGAACTGAACACTCGTTTTTTGGCCTCTCAGAGTGCTGACCGCGGGGCTTCCCTGGGCCCTCCGCCCTACCTGCGGACCGAGTTCCATCAGCACCAGCACCAGCACCAGCACACCCACCAGCACACGCACCAGCACACCTTCACGCCGTTCCCCCACGCCATCCCACCCACCGCCATCATGCCGACGCCAGCACCTCCCATGTTTGACAAATACCCTACAAAAGTTGACCCATTCTACCGGCACAGTCTCTTCCATTCCTATCCTCCTGCAGTGTCGGGCATCCCCCCTATGATCCCACCCACTGGCCCTTTTGGTTCACTACAAGGAGCATTTCAGCCGAAGACATCCAACCCTATCGATGTCGCTGCTCGGCCTGGGACAGTCCCACACACTTTACTCCAAAAGGACCCGAGGTTGACAGATCCTTTCAGACCTATGTTAAGGAAACCAGGGAAGTGGTGTGCTATGCATGTTCACATCGCCTGGCAGATTTACCACCACCAACAGAAAGTCAAGAAACAGATGCAGTCAGACCCACATAAGCTGGACTTTGGACTGAAACCTGAGTTCCTGAGCCGCCCTCCAGGCCCCAGTCTTTTTGGAGCCATCCACCACCCCCATGACCTGGCACGGCCTTCAACTTTGTTCTCTGCCGCTGGTGCTGCACACCCAACTGGGACCCCTTTTGGGCCACCTCCTCATCACAGCAACTTCCTCAACCCTGCTGCCCACCTAGAGCCTTTTAATCGGCCGTCTACATTCACAGGCCTAGCAGCAGTTGGTGGCAATGCCTTCGGGGGACTTGGAAATCCTTCCGTTACACCCAACTCAATGTTCGGCCACAAGGATGGCCCCAGTGTGCAGAACTTTAGCAACCCTCACGAACCCTGGAACCGGCTGCACCGAACGCCTCCGTCGTTCCCGACCCCTCCGCCCTGGCTGAAGCCAGGGGAGCTGGAGCGCAGCGCGTCCGCTGCAGCTCATGACAGAGATAGAGATGTAGATAAACGAGACTCATCTGTTAGTAAAGATGACAAAGAAAGGGAAAGCGTCGAGAAGAGACACTCCAGCCACCCTTCACCAGCACCTGTCCTCCCGGTGAATGCCCTGGGACATACCCGCAGCTCCACTGAACAGATCCGGGCTCATCTGAACACTGAGGCTCGGGAGAAGGACAAACCCAAAGAGAGGGAGAGAGACCACTCGGAATCCCGCAAGGACCTGGCCGCCGACGAGCACAAGGCGAAAGAGGGCCACCTGCCCGAGAAGGACGGGCACGGCCACGAGGGGCGCGCCGCGGGCGAAGAGGCCAAGCAGCTGGCCCGGGTGCCGTCTCCCTACGTGCGGACCCCGGTGGTGGAGAGTGCCAGGCCCAACAGCACCTCGAGCCGGGAGGCCGAGCCGCGCAAGGGTGAGCCGGCCTACGAGAACCCCAAGAAGAGCTCCGAGGTCAAGGTGAAGGAGGAGCGGAAGGAAGACCATGACCTGCCTCCAGAGGCCCCGCAGACCCACCGGGCCTCGGAGCCGCCGCCTCCCAACTCCTCGTCCAGCGTGCACCCGGGGCCCCTGGCCTCGATGCCCATGACGGTGGGGGTGACGGGCATTCACCCCATGAACAGCATCAGCAGCCTGGACAGGACTCGCATGATGACCCCCTTCATGGGCATCAGCCCCCTCCCGGGCGGAGAGCGCTTCCCGTACCCTTCTTTCCACTGGGACCCCATCCGGGACCCCTTGAGGGATCCTTACCGAGAACTTGACATTCACCGGAGAGACCCGCTGGGCAGGGACTTCCTGCTAAGGAACGACCCGCTCCACCGGCTCTCGACTCCCCGGCTGTACGAAGCCGACCGCTCCTTCAGGGACCGGGAGCCTCACGACTACAGCCACCACCACCACCACCACCACCACCCGCTGTCTGTGGACCCTCGGCGGGAGCACGAGCGGGGAGGCCACCTGGACGAGCGGGAGCGCTTGCACATGCTCAGAGAAGACTACGAGCACACGCGGCTCCACTCCGTGCACCCCGCCTCCCTCGACGGACACCTCCCCCACCCCAGCCTCATCACCCCGGGACTCCCCAGCATGCACTATCCCCGCATCAGCCCCACCGCGGGCAACCAGAACGGACTCCTCAACAAGACCCCTCCGACAGCAGCGCTGAGCGCACCTCCCCCGCTCATCTCCACGCTGGGGGGCCGCCCGGTCTCTCCCAGAAGGACGACTCCTCTGTCCGCAGAGATAAGGGAGAGGCCCCCTTCCCACACGCTGAAGGATATCGAGGCCCGATAA"

class SmDict(dict):
    def __missing__(self, key):
        return -1


def gen_colors():
    global colors
    colors = []
    for x in range(256):
        print(hex(x))
        for y in range(256):
            for z in range(256):
                if x + y + z > 600:
                    continue
                else:
                    a, b, cd = hex(x)[2:], hex(y)[2:], hex(z)[2:]
                    if len(a) == 1:
                        a = '0' + a
                    if len(b) == 1:
                        b = '0' + b
                    if len(cd) == 1:
                        cd = '0' + cd
                    col = '#' + a + b + cd
                    colors.append(col)
    random.shuffle(colors)

gen_colors()

color_bindings = SmDict()
root = Tk()
root2 = Toplevel(root)
canv = Canvas(root, width=1200, height=700)
canv2 = Canvas(root2, width=1200, height=700)
canv.pack()
canv2.pack()


def get_str_var(s):
    ret = ''.join(set(s))
    return len(ret)


seq = int(len(colors)/get_str_var(string))
currID = 0


def draw_color_letter(l, x, y):
    if color_bindings[l] == -1:
        if len(colors) != 0:
            global currID
            # color_bindings[l] = colors.pop(random.randint(0, len(colors) - 1))
            color_bindings[l] = colors[currID]
            currID = min(len(colors) - 1, currID + seq)
        else:
            color_bindings[l] = de_col
    to_color = color_bindings[l]
    if l == '*':
        to_color = "black"
    canv.create_text(x + 4, y, text=l, anchor=NW, fill=to_color, font=("Purisa", 16))

cx = 0
cy = 0

for c in string:
    draw_color_letter(c, cx*17, cy*17)
    cx += 1
    if cx >= 40:
        cy += 1
        cx = 0

codons = SmDict()


def cut_codons(s):
    for i in range(0, len(s), 3):
        codon = s[i: i+3]
        if codons[codon] == -1:
            codons[codon] = 1
        else:
            codons[codon] = codons[codon] + 1

cut_codons(string2)
sorted_codons = sorted(codons.items(), key=operator.itemgetter(1))
print(sorted_codons)


root.mainloop()
